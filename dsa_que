class Solution {
public:
    int lengthOfLongestSubstring(string s) {
//         map<char,int>m;
//         int maxi=0;
//         int curr_len=0;
//         int len=1;
//         for(auto it:s)
//         {
//             if(m[it]==0)
//             {
//                 m[it]=len;
//                 len++;
//                 curr_len++;
//                 maxi=max(maxi,curr_len);
//                 cout<<"!0"<<" "<<maxi<<" "<<len<<" " <<curr_len<<endl;;
//             }
//             else
//             {
//                 int temp=m[it];
//                 len=len-m[it];
//                 for(auto it2:m)
//                 {
//                     it2.second-=temp;
//                     if(it2.second<=0)
//                         m[it2.first]=0;
//                         // m.erase(it2.first);
//                 }
//                 m[it]=len;
                
//                 curr_len=len;
//                 maxi=max(maxi,curr_len);
//                 len++;
//                 cout<<"=0"<<" "<<maxi<<" "<<len<<" " <<curr_len<<endl;
                
//             }
            
//         }
//         return maxi;
        
        
        int maxi=0;
        int start=-1;
        map<char,int>m;
        for(auto it:s)
            m[it]=-1;
        for(int i=0;i<s.length();i++)
        {
            if(m[s[i]]>start)
                start=m[s[i]];
            m[s[i]]=i;
            maxi=max(maxi,i-start);
        }
        return maxi;
        
        
        
    }
};
